using System;
using System.Collections.Generic;
using Services.ServiceLocator;
using UnityEngine;

namespace Infrastructure.SaveLoadLogic
{
    public class SaveLoad : ISave
    {
        private readonly Dictionary<Type, object> _datas = new ();
        private readonly DataBase _dataBase;

        public SaveLoad() : this(new DataBase()) {}
        
        public SaveLoad(DataBase dataBase) => 
            _dataBase = dataBase;

        public TData Get<TData>()
        {
            if (_datas.ContainsKey(typeof(TData)))
                return (TData)_datas[typeof(TData)];

            return _dataBase.Get<TData>();
        }

        public void Add<T>(T data)
        {
            _datas[typeof(T)] = data;

            _dataBase.Set(data);
        }
    }

    public class DataBase
    {
        public void Set<TData>(TData data)
        {
            DataWrapper<TData> wrapper = new DataWrapper<TData>(data);

            PlayerPrefs.SetString(typeof(TData).FullName, JsonUtility.ToJson(wrapper));
            PlayerPrefs.Save();
        }

        public TData Get<TData>()
        {
            string serializeObject = PlayerPrefs.GetString(typeof(TData).FullName);

            if (serializeObject == null)
                return default(TData);

            DataWrapper<TData> wrapper = JsonUtility.FromJson<DataWrapper<TData>>(serializeObject);

            return wrapper == null 
                ? default(TData) 
                : wrapper.Value;
        }
    }

    public class DataWrapper<T>
    {
        public T Value;

        public DataWrapper(T value) => 
            Value = value;
    }

    public interface ISave : IService
    {
        TData Get<TData>();
        void Add<TData>(TData data);
    }
}
